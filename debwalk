#!/usr/bin/env python3
"""
Recursively list files in a Debian package
"""
import argparse
import contextlib
import hashlib
import os
import sys
import tarfile

import ar
import ruamel.yaml
import zstandard



def file_chunks(file, size=16384):
    while chunk := file.read(size):
        yield chunk


def file_hash(file, digest):
    h = digest()
    size = 0
    for chunk in file_chunks(file):
        size += len(chunk)
        h.update(chunk)
    return h, size


def entry(name, file, digest_type):
    if digest_type == 'sha256':
        hash_obj, size = file_hash(file, hashlib.sha256)
        return {'name': name, 'size': size, 's256': hash_obj.hexdigest()}
    elif digest_type == 'none':
        size = sum(len(chunk) for chunk in file_chunks(file))
        return {'name': name, 'size': size}
    raise ValueError

@contextlib.contextmanager
def out_file(path, mode='wb', encoding=None, default=None):
    if path == '-':
        default = sys.stdout if default is None else default
        f = default.buffer if 'b' in mode else default
        yield f
        f.flush()
        return
    else:
        f = open(path, mode=mode, encoding=encoding)
        yield f
        f.close()
        return


parser = argparse.ArgumentParser(
    description=__doc__,
)
parser.add_argument('--debfile', metavar='PATH', required=True, help='Input .deb file')
parser.add_argument('--outfile', metavar='PATH', default='-', help='Output file (default: stdout)')
parser.add_argument('--digest', choices=['sha256', 'none'], default='sha256', help='Hash type to perform (default: %(default)s)')

args = parser.parse_args()

doc = head = []

with open(args.debfile, 'rb') as f:
    thing = entry(f.name, f, args.digest)
    thing['children'] = []
    head.append(thing)
    head = head[-1]['children']
    f.seek(0)
    archive = ar.Archive(f)
    for ar_entry in archive:
        with archive.open(ar_entry.name, 'rb') as f2:
            thing = entry(ar_entry.name, f2, args.digest)
            thing['children'] = []
            assert ar_entry.size == thing['size']
            head.append(thing)
            f2.seek(0)
            stem, ext = os.path.splitext(ar_entry.name)
            if ext == '.zst':
                with zstandard.open(f2) as f3:
                    thing = entry(stem, f3, args.digest)
                    thing['children'] = []
                    head[-1]['children'].append(thing)
                f2.seek(0)
            stem, ext = os.path.splitext(stem)
            if ext == '.tar':
                with zstandard.open(f2) as f4:
                    with tarfile.open(fileobj=f4, mode='r|') as f5:
                        for member in f5:
                            if not member.isreg():
                                continue
                            with f5.extractfile(member) as f6:
                                thing = entry(member.name, f6, args.digest)
                                assert thing['size'] == member.size
                                thing['children'] = []
                                head[-1]['children'][-1]['children'].append(thing)


with out_file(args.outfile) as fout:
    yaml = ruamel.yaml.YAML()
    yaml.dump(doc, fout)
